var documenterSearchIndex = {"docs":
[{"location":"#CounterMarking","page":"Home","title":"CounterMarking","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CounterMarking.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#CounterMarking.meanshow","page":"Home","title":"CounterMarking.meanshow","text":"meanshow(seg; kwargs...)\n\nDisplay a segmented image using the mean color of each segment.\n\nnote: Note\nYou must load the ImageView package to use this function.\n\n\n\n\n\n","category":"function"},{"location":"#CounterMarking.randshow","page":"Home","title":"CounterMarking.randshow","text":"randshow(seg; kwargs...)\n\nDisplay a segmented image using random colors for each segment.\n\nnote: Note\nYou must load the ImageView package to use this function.\n\n\n\n\n\n","category":"function"},{"location":"#CounterMarking.segment_image-Tuple{AbstractMatrix{<:ColorTypes.Color}}","page":"Home","title":"CounterMarking.segment_image","text":"seg = segment_image(img; threshold=0.1, min_size=20)\n\nGiven an image img, segment it into regions using a region growing algorithm. min_size is the minimum number of pixels per segment, and threshold determines how different two colors must be to be considered different segments. Larger threshold values will result in fewer segments.\n\n\n\n\n\n","category":"method"},{"location":"#CounterMarking.spots-Tuple{Any}","page":"Home","title":"CounterMarking.spots","text":"spotdict, stimulus = spots(seg; max_size_frac=0.1)\n\nGiven a segmented image seg, return a Dict(idx => spot) where idx is the segment index and spot is a Spot object where spot.npixels is the number of pixels in the segment and spot.centroid is the centroid of the segment.\n\nstimulus is a Pair{Int, Spot} where the first element is the index of the stimulus segment and the second element is the Spot object for that segment.\n\nSpots larger than max_size_frac * npixels (default: 10% of the image) are ignored.\n\n\n\n\n\n","category":"method"},{"location":"#CounterMarking.stimulus_index","page":"Home","title":"CounterMarking.stimulus_index","text":"idx = stimulus_index(seg::SegmentedImage, colorproj = RGB(1, 1, -2))\n\nGiven a segmented image seg, return the index of the segment that scores highest on the product of (1) projection (dot product) with colorproj and (2) number of pixels.\n\n\n\n\n\n","category":"function"},{"location":"#CounterMarking.upperleft-Tuple{AbstractDict{Int64, Spot}, Any, Any}","page":"Home","title":"CounterMarking.upperleft","text":"spotdict, stimulus = upperleft(spotdict::AbstractDict{Int, Spot}, stimulus, imgsize)\n\nGiven a spotdict of Spot objects and a stimulus segment, return a new spotdict where the centroids of the spots are flipped so that the stimlus spot is in the upper left corner.\n\n\n\n\n\n","category":"method"}]
}
