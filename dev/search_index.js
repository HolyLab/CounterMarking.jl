var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/#CounterMarking.density_map-Tuple{AbstractString}","page":"Reference","title":"CounterMarking.density_map","text":"nmarked = density_map(jldfile::AbstractString)\n\nGiven a JLD2 file jldfile written by gui, return an array nmarked counting of the number of images with a urine spot in each pixel. Before counting, the images are flipped so that the stimulus segment is in the upper left corner.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.get_centroidsacc-Tuple{Matrix{Int64}}","page":"Reference","title":"CounterMarking.get_centroidsacc","text":"centroidsacc, nadj = get_centroidsacc(seg::SegmentedImage)\n\nGiven a the index map indexmap of a segmented image, return an accumulator for each segment's centroid as well as the number of times two segments are adjacent.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.gui-Tuple{AbstractString, Any}","page":"Reference","title":"CounterMarking.gui","text":"gui(outbase, files)\ngui(outbase, glob::GlobMatch)\n\nRun the graphical user interface (GUI) for CounterMarking. Supply the base name of the output files (e.g., \"my_results\") and a list of image files to process (alternatively, supply a glob\"pattern\" that matches just the files you want to process).\n\nThe GUI will display the images and their segmentation, and allow the user to select the segments corresponding to the stimulus (yellow) and marked spots. The results will be save to:\n\noutbase.xlsx: an Excel file with one sheet per image, containing summary  statistics on the stimulus spot and the selected spots.\noutbase.jld2: a JLD2 file with one dataset per image, containing the  segmented image, the selected spots, and the stimulus segment.\n\nThe JLD2 file can be used by density_map.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.meanshow","page":"Reference","title":"CounterMarking.meanshow","text":"meanshow(seg; kwargs...)\nmeanshow(img, seg; kwargs...)\n\nDisplay a segmented image using the mean color of each segment. The version with img displays the original image and the segmented image one atop the other, and zooming on one will zoom on the other.\n\nnote: Note\nYou must load the ImageView package to use this function.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CounterMarking.process_images-Tuple{AbstractString, Glob.GlobMatch}","page":"Reference","title":"CounterMarking.process_images","text":"process_images(outfile::AbstractString, glob::GlobMatch; dirname=pwd())\nprocess_images(outfile::AbstractString, glob::AbstractString; dirname=pwd())\n\nProcess all images with filenames matching glob and save the results to outfile. Each image will be a separate sheet in the Excel file.\n\nOptionally specify the dirname containing the images.\n\nExamples\n\nTo process a collection of images in a different directory, and save the results to that same directory:\n\njulia> process_images(\"2025-03-15/results.xlsx\", glob\"*.png\"; dirname=\"2025-03-15\")\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.randshow","page":"Reference","title":"CounterMarking.randshow","text":"randshow(seg; kwargs...)\nrandshow(img, seg; kwargs...)\n\nDisplay a segmented image using random colors for each segment. The version with img displays the original image and the segmented image one atop the other, and zooming on one will zoom on the other.\n\n!!! note You must load the ImageView package to use this function.\n\n\n\n\n\n","category":"function"},{"location":"reference/#CounterMarking.segment_image-Tuple{AbstractMatrix{<:ColorTypes.Color}}","page":"Reference","title":"CounterMarking.segment_image","text":"seg = segment_image(img; threshold=0.1, min_size=20)\n\nGiven an image img, segment it into regions using a region growing algorithm. min_size is the minimum number of pixels per segment, and threshold determines how different two colors must be to be considered different segments. Larger threshold values will result in fewer segments.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.spots-Tuple{ImageSegmentation.SegmentedImage}","page":"Reference","title":"CounterMarking.spots","text":"spotdict, stimulus = spots(seg; max_size_frac=0.1)\n\nGiven a segmented image seg, return a Dict(idx => spot) where idx is the segment index and spot is a Spot object where spot.npixels is the number of pixels in the segment and spot.centroid is the centroid of the segment.\n\nstimulus is a Pair{Int, Spot} where the first element is the index of the stimulus segment and the second element is the Spot object for that segment.\n\nSpots larger than max_size_frac * npixels (default: 10% of the image) are ignored.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.stimulus_index-Tuple{ImageSegmentation.SegmentedImage, Any}","page":"Reference","title":"CounterMarking.stimulus_index","text":"idx = stimulus_index(seg::SegmentedImage, centroidsacc; colorproj = RGB(1, 1, -2), expectedloc = nothing)\n\nGiven a segmented image seg, return the index of the segment that scores highest on the product of (1) projection (dot product) with colorproj and (2) number of pixels.\n\nOptionally, if images were taken with a fixed location for the stimulus, a segment's score is divided by the squared distance of its centroid (via centroidsacc) from the position given by expectedloc.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.upperleft-Tuple{AbstractDict{Int64, Spot}, Any, Any}","page":"Reference","title":"CounterMarking.upperleft","text":"spotdict_ul, stimulus_ul = upperleft(spotdict::AbstractDict{Int, Spot}, stimulus, imgsize)\n\nGiven a spotdict of Spot objects and a stimulus segment, return a new spotdict_ul corresponding to an image flipped so that stimulus_ul is in the upper left corner.\n\n\n\n\n\n","category":"method"},{"location":"reference/#CounterMarking.writexlsx-Tuple{AbstractString, ImageSegmentation.SegmentedImage}","page":"Reference","title":"CounterMarking.writexlsx","text":"writexlsx(filename::AbstractString, seg::SegmentedImage)\n\nSave the segmented image data to an Excel file.\n\n\n\n\n\n","category":"method"},{"location":"#CounterMarking","page":"Home","title":"CounterMarking","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CounterMarking analyzes experiments on scent-marking in mice, specifically images of urine countermarking visualized by the ninhydrin reaction:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: A ninhydrin-stained image)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The yellow spot corresponds to a stimulus provided by the experimenter, and the small light-blue spots are deposited marks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tips on image quality:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Put the stimulus near one of the four corners, keeping its location as consistent as possible between images\nEnsure lighting is fairly uniform\nMake sure that any extraneous marks (e.g., the black writing in the image above) are of a very different color from scent marks.\nEnsure that all your images are of the same size (i.e., same number of pixels horizontally and vertically), even if there are some extra pixels on the edges of the image","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"#Installation-and-setup-(one-time-setup)","page":"Home","title":"Installation and setup (one time setup)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several ways to organize your data, but one recommended approach is to have a parent \"project\" folder, and then store images collected on different days in subfolders named by date:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MyCounterMarkingFolder\n  Project.toml\n  2025-03-15/\n  2025-03-17/\n  ...","category":"page"},{"location":"","page":"Home","title":"Home","text":"We'll create the Project.toml for running the analysis. From the command line within MyCounterMarkingFolder, the steps below will:","category":"page"},{"location":"","page":"Home","title":"Home","text":"start Julia\nget into pkg> mode\nactivate a new project\ninstall the packages you'll use","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here are the steps, starting from the OS command line:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MyCounterMarkingFolder$ julia\n<banner shows up>\n\njulia> ]    # this enters pkg mode\npkg> activate .\n\npkg> add CounterMarking ImageView Glob FileIO ImageIO","category":"page"},{"location":"","page":"Home","title":"Home","text":"This should create the Project.toml file in MyCounterMarkingFolder. If this succeeds, you shouldn't have to do this again.","category":"page"},{"location":"","page":"Home","title":"Home","text":"From this point on, start Julia like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MyCounterMarkingFolder$ julia --project","category":"page"},{"location":"","page":"Home","title":"Home","text":"and it will automatically \"activate\" this project and you'll have access to all those packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nIf you ever need to update the packages (e.g., to get any improvements to CounterMarking.jl), you can update packages with pkg> up. See the Pkg documentation for more information.","category":"page"},{"location":"#Processing-data-with-the-GUI","page":"Home","title":"Processing data with the GUI","text":"","category":"section"},{"location":"#Running-the-GUI","page":"Home","title":"Running the GUI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From within MyCounterMarkingFolder created above, start Julia like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MyCounterMarkingFolder$ julia --project","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then load the packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CounterMarking, Glob","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then specify the images you want to process:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> gui(\"results_file_name\", glob\"Picture*.png\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will save your results to \"results_file_name.xlsx\" and \"results_file_name.jld2\". The syntax glob\"pattern\" means \"all files that match this pattern\", where * means \"one or more characters\". See this tutorial for more information about glob syntax. Alternatively, you can supply a list of files:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> gui(\"results_file_name\", [\"PictureA.png\", \"mouse7.png\"])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, you can supply a calibration image to improve segmentation by correcting for uneven illumination.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: An image to be used for calibration)","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> gui(\"results_file_name\", [\"PictureA.png\", \"mouse7.png\"]; background_path=\"calibration_image.png\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are a few more keyword arguments that might be useful:","category":"page"},{"location":"","page":"Home","title":"Home","text":"crop_top, crop_bottom, crop_left, and crop_right specify a number of pixels to be cropped from images along each side\nexpectedloc specifies the expected location of the stimulus spot in pixels (after cropping)","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> gui(\"results_file_name\", glob\"Picture*.png\"; \n            background_path=\"calibration_image.png,\n            crop_top=93,\n            crop_bottom=107,\n            crop_left=55,\n            crop_right=45,    \n            expectedloc=[1600,3333]\n        )","category":"page"},{"location":"","page":"Home","title":"Home","text":"However you launch it, you should see something like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: GUI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"On the top is the raw image. On the bottom is the segmented image; you should visually compare the two to check whether you're pleased with the quality of the segmentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If the default segmentation doesn't look quite right, try adjusting the Color Similarity Threshold value using the buttons at the bottom of the GUI. (If you can't obtain a segmentation that you're happy with, click \"Skip\" to omit that file from analysis.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you like the segmentation, your tasks are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"click on all the checkboxes with colors that correspond to urine spots. You'll notice that the stimulus spot is pre-clicked (you can correct its choice if it didn't pick correctly). Most of the time there will be only one you need to check, but you can click more than one. In this example image, all the urine spots are marked red, so you'd check the box that has the red border. Leave the stimulus spot checked, too.\nclick \"Done & Next\" to advance to the next image in the sequence","category":"page"},{"location":"","page":"Home","title":"Home","text":"After it finishes cycling through all the images, it will save your results and close the window.","category":"page"},{"location":"#Summarizing-the-results:-create-a-\"density-map\"-of-marks-across-multiple-images","page":"Home","title":"Summarizing the results: create a \"density map\" of marks across multiple images","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have many images collected under the same conditions (e.g., with different subject animals but the same stimuli), you can effectively overlay the entire collection of images. For this demo, it's assumed that \"results_file_name.jld2\" is one of the files output by the GUI.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CounterMarking, ImageView   # load packages (if this is a fresh session)\n\njulia> count = density_map(\"results_file_name.jld2\");\n\njulia> dmap = count ./ maximum(count);\n\njulia> dct = imshow(dmap);","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\ndensity_map requires that most or all of your images are of the same size.","category":"page"},{"location":"#Processing-manually","page":"Home","title":"Processing manually","text":"","category":"section"},{"location":"#Step-1:-start-Julia-with-the-right-project","page":"Home","title":"Step 1: start Julia with the right project","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From within MyCounterMarkingFolder created above, start Julia like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MyCounterMarkingFolder$ julia --project","category":"page"},{"location":"#Step-2:-load-the-packages-you'll-need","page":"Home","title":"Step 2: load the packages you'll need","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From inside Julia, load the packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CounterMarking, ImageView, FileIO","category":"page"},{"location":"","page":"Home","title":"Home","text":"CounterMarking is this package, used to perform and organize the analysis. ImageView is an image display tool. FileIO loads many different file formats, including images.","category":"page"},{"location":"#Step-3:-load-a-test-image","page":"Home","title":"Step 3: load a test image","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to use an image in one of the subfolders, use something like","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> img = load(\"2025-03-15/picture1.png\");","category":"page"},{"location":"","page":"Home","title":"Home","text":"You'll need to replace the material inside quotes with the actual path and filename of your image.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternately, if you want to use the test image that comes with CounterMarking.jl, do the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> img = load(joinpath(pkgdir(CounterMarking), \"docs\", \"src\", \"assets\", \"Picture.png\"));","category":"page"},{"location":"#Step-4:-visualize-the-image","page":"Home","title":"Step 4: visualize the image","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It's usually a good idea to visually check that what you're working with makes sense:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> dct = imshow(img);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that as you move your mouse cursor over the image, a little text box in the lower left updates with the position and information about the color of the pixel under your cursor. That can occasionally be handy, especially for checking locations of spots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If all looks as expected, you can close the window.","category":"page"},{"location":"#Step-5:-segment-the-image","page":"Home","title":"Step 5: segment the image","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We'll split this image into different regions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> seg = segment_image(img)\nPruning segments smaller than 50 pixels\nSegmented Image with:\n  labels map: 1220×2441 Matrix{Int64}\n  number of labels: 153\n\njulia> dct = randshow(img, seg);","category":"page"},{"location":"","page":"Home","title":"Home","text":"After the second command, randshow, you'll see two images: the original at the top, and the \"segmented\" image below. This displays the different segments (regions) using a randomly-chosen color, which can be handy for checking how well the analysis did in identifying separate spots. You can alternatively use meanshow to show each segment using the average color of all pixels in that segment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you Ctrl-click and drag on the image, you'll zoom in on both images. This can be handy for inspecting fine details. Ctrl-double-click takes you back to the full view.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nIf you don't like how segment_image performed, read its documentation to learn about some of the options you have for controlling it.","category":"page"},{"location":"#Step-6:-save-the-spots-to-an-Excel-file","page":"Home","title":"Step 6: save the spots to an Excel file","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The columns marked \"raw\" correspond to pixel locations in the original image; the columns marked \"UL\" come from flipping the image to place the stimulus spot in the Upper Left of the image. This way of \"standardizing\" the location makes certain analyses easier.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> writexlsx(\"mydata.xlsx\", seg)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Optionally specify a full directory path, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> writexlsx(raw\"C:\\Users\\me\\somefolder\\mydata.xlsx\", seg)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(You don't need raw on Linux or Mac, but it is helpful on Windows.)","category":"page"},{"location":"#Step-7:-process-a-whole-directory-of-images-at-once","page":"Home","title":"Step 7: process a whole directory of images at once","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have many images in one folder, you can process them all using a single command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> process_images(\"2025-03-15/results.xlsx\", \"2025-03-15/*.png\")","category":"page"}]
}
